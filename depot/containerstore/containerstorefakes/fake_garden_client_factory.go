// Code generated by counterfeiter. DO NOT EDIT.
package containerstorefakes

import (
	"sync"

	"code.cloudfoundry.org/executor/depot/containerstore"
	"code.cloudfoundry.org/garden"
	lager "code.cloudfoundry.org/lager/v3"
)

type FakeGardenCLientFactory struct {
	NewGardenClientStub        func(lager.Logger, string) garden.Client
	newGardenClientMutex       sync.RWMutex
	newGardenClientArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	newGardenClientReturns struct {
		result1 garden.Client
	}
	newGardenClientReturnsOnCall map[int]struct {
		result1 garden.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGardenCLientFactory) NewGardenClient(arg1 lager.Logger, arg2 string) garden.Client {
	fake.newGardenClientMutex.Lock()
	ret, specificReturn := fake.newGardenClientReturnsOnCall[len(fake.newGardenClientArgsForCall)]
	fake.newGardenClientArgsForCall = append(fake.newGardenClientArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	stub := fake.NewGardenClientStub
	fakeReturns := fake.newGardenClientReturns
	fake.recordInvocation("NewGardenClient", []interface{}{arg1, arg2})
	fake.newGardenClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGardenCLientFactory) NewGardenClientCallCount() int {
	fake.newGardenClientMutex.RLock()
	defer fake.newGardenClientMutex.RUnlock()
	return len(fake.newGardenClientArgsForCall)
}

func (fake *FakeGardenCLientFactory) NewGardenClientCalls(stub func(lager.Logger, string) garden.Client) {
	fake.newGardenClientMutex.Lock()
	defer fake.newGardenClientMutex.Unlock()
	fake.NewGardenClientStub = stub
}

func (fake *FakeGardenCLientFactory) NewGardenClientArgsForCall(i int) (lager.Logger, string) {
	fake.newGardenClientMutex.RLock()
	defer fake.newGardenClientMutex.RUnlock()
	argsForCall := fake.newGardenClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGardenCLientFactory) NewGardenClientReturns(result1 garden.Client) {
	fake.newGardenClientMutex.Lock()
	defer fake.newGardenClientMutex.Unlock()
	fake.NewGardenClientStub = nil
	fake.newGardenClientReturns = struct {
		result1 garden.Client
	}{result1}
}

func (fake *FakeGardenCLientFactory) NewGardenClientReturnsOnCall(i int, result1 garden.Client) {
	fake.newGardenClientMutex.Lock()
	defer fake.newGardenClientMutex.Unlock()
	fake.NewGardenClientStub = nil
	if fake.newGardenClientReturnsOnCall == nil {
		fake.newGardenClientReturnsOnCall = make(map[int]struct {
			result1 garden.Client
		})
	}
	fake.newGardenClientReturnsOnCall[i] = struct {
		result1 garden.Client
	}{result1}
}

func (fake *FakeGardenCLientFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newGardenClientMutex.RLock()
	defer fake.newGardenClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGardenCLientFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ containerstore.GardenCLientFactory = new(FakeGardenCLientFactory)
