// Code generated by counterfeiter. DO NOT EDIT.
package containerstorefakes

import (
	"sync"

	"code.cloudfoundry.org/executor"
	"code.cloudfoundry.org/executor/depot/containerstore"
	"code.cloudfoundry.org/garden"
	lager "code.cloudfoundry.org/lager/v3"
)

type FakeVolumeMountedFilesImplementor struct {
	CreateDirStub        func(lager.Logger, executor.Container) ([]garden.BindMount, error)
	createDirMutex       sync.RWMutex
	createDirArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
	}
	createDirReturns struct {
		result1 []garden.BindMount
		result2 error
	}
	createDirReturnsOnCall map[int]struct {
		result1 []garden.BindMount
		result2 error
	}
	RemoveDirStub        func(lager.Logger, executor.Container) error
	removeDirMutex       sync.RWMutex
	removeDirArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
	}
	removeDirReturns struct {
		result1 error
	}
	removeDirReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumeMountedFilesImplementor) CreateDir(arg1 lager.Logger, arg2 executor.Container) ([]garden.BindMount, error) {
	fake.createDirMutex.Lock()
	ret, specificReturn := fake.createDirReturnsOnCall[len(fake.createDirArgsForCall)]
	fake.createDirArgsForCall = append(fake.createDirArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
	}{arg1, arg2})
	stub := fake.CreateDirStub
	fakeReturns := fake.createDirReturns
	fake.recordInvocation("CreateDir", []interface{}{arg1, arg2})
	fake.createDirMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeMountedFilesImplementor) CreateDirCallCount() int {
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	return len(fake.createDirArgsForCall)
}

func (fake *FakeVolumeMountedFilesImplementor) CreateDirCalls(stub func(lager.Logger, executor.Container) ([]garden.BindMount, error)) {
	fake.createDirMutex.Lock()
	defer fake.createDirMutex.Unlock()
	fake.CreateDirStub = stub
}

func (fake *FakeVolumeMountedFilesImplementor) CreateDirArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	argsForCall := fake.createDirArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeMountedFilesImplementor) CreateDirReturns(result1 []garden.BindMount, result2 error) {
	fake.createDirMutex.Lock()
	defer fake.createDirMutex.Unlock()
	fake.CreateDirStub = nil
	fake.createDirReturns = struct {
		result1 []garden.BindMount
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeMountedFilesImplementor) CreateDirReturnsOnCall(i int, result1 []garden.BindMount, result2 error) {
	fake.createDirMutex.Lock()
	defer fake.createDirMutex.Unlock()
	fake.CreateDirStub = nil
	if fake.createDirReturnsOnCall == nil {
		fake.createDirReturnsOnCall = make(map[int]struct {
			result1 []garden.BindMount
			result2 error
		})
	}
	fake.createDirReturnsOnCall[i] = struct {
		result1 []garden.BindMount
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeMountedFilesImplementor) RemoveDir(arg1 lager.Logger, arg2 executor.Container) error {
	fake.removeDirMutex.Lock()
	ret, specificReturn := fake.removeDirReturnsOnCall[len(fake.removeDirArgsForCall)]
	fake.removeDirArgsForCall = append(fake.removeDirArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
	}{arg1, arg2})
	stub := fake.RemoveDirStub
	fakeReturns := fake.removeDirReturns
	fake.recordInvocation("RemoveDir", []interface{}{arg1, arg2})
	fake.removeDirMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeMountedFilesImplementor) RemoveDirCallCount() int {
	fake.removeDirMutex.RLock()
	defer fake.removeDirMutex.RUnlock()
	return len(fake.removeDirArgsForCall)
}

func (fake *FakeVolumeMountedFilesImplementor) RemoveDirCalls(stub func(lager.Logger, executor.Container) error) {
	fake.removeDirMutex.Lock()
	defer fake.removeDirMutex.Unlock()
	fake.RemoveDirStub = stub
}

func (fake *FakeVolumeMountedFilesImplementor) RemoveDirArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.removeDirMutex.RLock()
	defer fake.removeDirMutex.RUnlock()
	argsForCall := fake.removeDirArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeMountedFilesImplementor) RemoveDirReturns(result1 error) {
	fake.removeDirMutex.Lock()
	defer fake.removeDirMutex.Unlock()
	fake.RemoveDirStub = nil
	fake.removeDirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeMountedFilesImplementor) RemoveDirReturnsOnCall(i int, result1 error) {
	fake.removeDirMutex.Lock()
	defer fake.removeDirMutex.Unlock()
	fake.RemoveDirStub = nil
	if fake.removeDirReturnsOnCall == nil {
		fake.removeDirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeDirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeMountedFilesImplementor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	fake.removeDirMutex.RLock()
	defer fake.removeDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumeMountedFilesImplementor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ containerstore.VolumeMountedFilesImplementor = new(FakeVolumeMountedFilesImplementor)
